#include <bits/stdc++.h>

using namespace std;

ifstream fin ("date.in");
ofstream fout ("date.out");
char s[1000000];
int n,m,i,k,j,cif[6],op,semn;
long long val,val2,poz1,poz2,poz3,nr,sol,base;
map <long long,long long> v,w;
deque <long long> d;
char a[1000][1000];
int get_next(){
    long long sol = -1;
    for (;;){
        if (i > k)
            break;
        cif[1] = cif[2] = cif[3] = cif[4] = cif[5] = 0;
        int poz = 5;
        long long nr = v[i];
        while (nr > 0){
            cif[poz] = nr%10;
            poz--;
            nr /= 10;
        }
        op = cif[4]*10 + cif[5];
        if (op == 99)
            break;
        /// 0  pozitie, 1 valoare, 2 - base
        if (cif[3] == 0)
            poz1 = v[i+1];
        else {
            if (cif[3] == 1)
                poz1 = i+1;
            else poz1 = base + v[i+1];
        }

        if (cif[2] == 0)
            poz2 = v[i+2];
        else {
            if (cif[2] == 1)
                poz2 = i+2;
            else poz2 = base + v[i+2];
        }
        if (cif[1] == 0)
            poz3 = v[i+3];
        else {
            if (cif[1] == 1)
                poz3 = i+3;
            else poz3 = base + v[i+3];
        }

        if (op == 3){
            if (!d.empty()){
                v[poz1] = d.front();
                d.pop_front();
            } else break;
            //v[poz1] = 1;
            i += 2;
            continue;
        }
        if (op == 4){
            sol = v[poz1];
            i += 2;
            //break; (break trebuia pt partea 1)
            continue;
        }


        if (op == 1){
            v[poz3] = v[poz1] + v[poz2];
            i += 4;
            continue;
        }
        if (op == 2){
            v[poz3] = v[poz1] * v[poz2];
            i += 4;
            continue;
        }
        if (op == 5){
            if (v[poz1])
                i = v[poz2];
            else i += 3;

            continue;
        }
        if (op == 6){
            if (v[poz1] == 0)
                i = v[poz2];
            else i += 3;

            continue;
        }
        if (op == 7){
            v[poz3] = (v[poz1] < v[poz2]);
            i += 4;
            continue;
        }
        if (op == 8){
            v[poz3] = (v[poz1] == v[poz2]);
            i += 4;
            continue;
        }
        if (op == 9){
            /// mi se schimba baza
            base += v[poz1];
            i += 2;
            continue;
        }
        break;
    }
    return sol;
}
int main (){

    fin>>s;
    n = strlen (s);
    k = -1, semn = 1;
    for (i=0;i<n;i++){
        if (s[i] == '-')
            semn = -1;
        else {
            if (s[i] == ','){
                v[++k] = nr*semn;
                nr = 0;
                semn = 1;
            }
            else {
                nr = nr*10 + s[i] - '0';
            }
        }
    }
    v[++k] = nr;
    for (i=0;i<=k;i++)
        w[i] = v[i];
    i = 0, base = 0;
    m = 0;
    n = 1;
    int maxi = 0;
    for (;;){
        int x = get_next();
        if (x == -1)
            break;
        if (x == 10)
            n++, m = 0;
        else {
            a[n][++m] = x;
            maxi = max (maxi,m);
        }
    }
    /// part 1:
    int ans = 0;
    for (i=1;i<=n;i++){
        for (j=1;j<=maxi;j++){
            if (a[i][j] == '#' && a[i][j-1] == '#' && a[i][j+1] == '#' && a[i-1][j] == '#' && a[i+1][j] == '#')
                ans += (i-1)*(j-1);
            fout<<a[i][j];
        }
        fout<<"\n";
    }
    fout<<ans<<"\n";
    /// part 2

    /// resetez inputul

    for (i=0;i<=k;i++)
        v[i] = w[i];

    /// A: R,10,L,8,R,10,R,4
    /// B: L,6,L,6,R,10
    /// C: L,6,R,12,R,12,R,10
    /// ABACBCABAC

    d.clear();
    string c = "A,B,A,C,B,C,A,B,A,C\n"; /// sirul de mutari
    for (int i=0;i<c.size();i++)
        d.push_back(c[i]);
    c = "R,10,L,8,R,10,R,4\n"; /// A
    for (int i=0;i<c.size();i++)
        d.push_back(c[i]);
    c = "L,6,L,6,R,10\n"; /// B
    for (int i=0;i<c.size();i++)
        d.push_back(c[i]);
    c = "L,6,R,12,R,12,R,10\n"; /// C
    for (int i=0;i<c.size();i++)
        d.push_back(c[i]);
    d.push_back('n');
    d.push_back('\n');
    v[0] = 2;
    i = 0, base = 0;
    fout<<get_next();


    return 0;
}
/*
....#############..................................
....#...........#..................................
....#...........#..................................
....#...........#..................................
....#...........#..................................
....#...........#..................................
#####...........#...............#############......
#...............#...............#...........#......
#...............#...............#...........#......
#...............#...............#...........#......
#...............#...............#...........#......
#...............#...............#...........#......
#.....###########...............#...........#......
#...............................#...........#......
#...............................#...........#......
#...............................#...........#......
#########.......................#.###########......
........#.......................#.#................
........#.......................#######............
........#.........................#...#............
........#.........#######.......###########........
........#.........#.....#.......#.#...#...#........
........#.......###########.....#.#...#...#........
........#.......#.#.....#.#.....#.#...#...#........
........#.......#.#.....###########...#...#........
........#.......#.#.......#.....#.....#...#........
........###########.......#######.....#...#........
................#.....................#...#........
................#.....................#######......
................#.........................#.#......
......^##########.........................#########
............................................#.....#
............................................#.....#
............................................#.....#
..................................###########.....#
..................................#...............#
..................................#...............#
..................................#...............#
..................................#...............#
..................................#...............#
..................................#...........#####
..................................#...........#....
..................................#...........#....
..................................#...........#....
..................................#...........#....
..................................#...........#....
..................................#############....
*/
